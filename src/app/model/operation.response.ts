export interface OperationResponseInterface {
  operationCode: number; // It will be generated by System
  operation: string; // It Should String eg. Git, Repository
  running: boolean; // Indicating Process is running
  message: string;
  log: OperationLogResponseInterface[];

  startTime?: string;
  stopTime?: string;
  notFinishOperation?: number;
  finishOperation?: number;
  totalOperation?: number;
}

export interface OperationLogResponseInterface {
  name: string;
  description: string;
  status: 'error' | 'normal' | 'warning' | 'danger';
  finish: boolean;
}

export class OperationLogResponse implements OperationLogResponseInterface {
  description: string;
  finish: boolean;
  name: string;
  status: 'error' | 'normal' | 'warning' | 'danger';

  constructor(operationLogResponse: OperationLogResponseInterface) {
    this.description = operationLogResponse.description;
    this.finish = operationLogResponse.finish;
    this.name = operationLogResponse.name;
    this.status = operationLogResponse.status;
  }
}

export class OperationResponse implements OperationResponseInterface {
  log: OperationLogResponseInterface[];
  message: string;
  operation: string;
  operationCode: number;
  running: boolean;

  startTime?: string;
  stopTime?: string;
  notFinishOperation?: number;
  finishOperation?: number;
  totalOperation?: number;

  constructor(operationResponse: OperationResponse) {
    this.log = operationResponse.log;
    this.message = operationResponse.message;
    this.operation = operationResponse.operation;
    this.operationCode = operationResponse.operationCode;
    this.running = operationResponse.running;

    this.startTime = operationResponse.startTime;
    this.stopTime = operationResponse.stopTime;
    this.notFinishOperation = operationResponse.notFinishOperation;
    this.finishOperation = operationResponse.finishOperation;
    this.totalOperation = operationResponse.totalOperation;
  }
}
